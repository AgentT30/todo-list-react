{"version":3,"sources":["components/Header.js","components/Form.js","components/Todo.js","components/TodoList.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","Form","setInputText","inputText","todos","setTodos","value","onChange","e","console","log","target","type","className","placeholder","onClick","preventDefault","text","completed","id","Math","random","Todo","todo","map","item","filter","el","TodoList","key","Footer","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wMAWeA,G,KARA,WACX,OACI,gCACI,4C,OCyBGC,EA5BF,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,aAAcC,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAY5C,OACI,8BACI,2BACIC,MAAOH,EACPI,SAfa,SAACC,GACtBC,QAAQC,IAAIF,EAAEG,OAAOL,OACrBJ,EAAaM,EAAEG,OAAOL,QAcdM,KAAK,OACLC,UAAU,UACVC,YAAY,sBAEhB,4BAAQC,QAfK,SAACP,GAClBA,EAAEQ,iBACFX,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAAEa,KAAMd,EAAWe,WAAW,EAAOC,GAAoB,IAAhBC,KAAKC,aAClEnB,EAAa,KAYsBW,UAAU,WAAWD,KAAK,UACrD,uBAAGC,UAAU,0B,OCSdS,EAhCF,SAAC,GAAqC,IAAnCL,EAAkC,EAAlCA,KAAMM,EAA4B,EAA5BA,KAAMnB,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAmB/B,OACI,yBAAKQ,UAAU,QACX,wBAAIA,UAAS,oBAAeU,EAAKL,UAAY,YAAc,KAAOD,GAClE,4BAAQF,QArBQ,SAACP,GACrBH,EACID,EAAMoB,KAAI,SAACC,GACP,OAAIA,EAAKN,KAAOI,EAAKJ,GACV,2BACAM,GADP,IAEIP,WAAYO,EAAKP,YAGlBO,OAYuBZ,UAAU,gBACxC,uBAAGA,UAAU,kBAEjB,4BAAQE,QAVM,SAACP,GACnBH,EAASD,EAAMsB,QAAO,SAACC,GAAD,OAAQA,EAAGR,KAAOI,EAAKJ,QASTN,UAAU,cACtC,uBAAGA,UAAU,oBCNde,EAlBE,SAAC,GAAyB,IAAvBvB,EAAsB,EAAtBA,SAAUD,EAAY,EAAZA,MAC1B,OACI,yBAAKS,UAAU,kBACX,wBAAIA,UAAU,aACTT,EAAMoB,KAAI,SAACD,GAAD,OACP,kBAAC,EAAD,CACInB,MAAOA,EACPC,SAAUA,EACVkB,KAAMA,EACNN,KAAMM,EAAKN,KACXY,IAAKN,EAAKJ,WCRnBW,EAJA,WACX,OAAO,gDCuBIC,MAnBf,WAAgB,IAAD,EACuBC,mBAAS,IADhC,mBACJ7B,EADI,KACOD,EADP,OAEe8B,mBAAS,IAFxB,mBAEJ5B,EAFI,KAEGC,EAFH,KAIX,OACI,yBAAKQ,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CACIX,aAAcA,EACdC,UAAWA,EACXC,MAAOA,EACPC,SAAUA,IAEd,kBAAC,EAAD,CAAUD,MAAOA,EAAOC,SAAUA,IAClC,kBAAC,EAAD,QCTQ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,a","file":"static/js/main.8df04e57.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <h1>Todo List</h1>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nconst Form = ({ setInputText, inputText, todos, setTodos }) => {\r\n    const inputTextHandler = (e) => {\r\n        console.log(e.target.value);\r\n        setInputText(e.target.value);\r\n    };\r\n\r\n    const clickHandler = (e) => {\r\n        e.preventDefault();\r\n        setTodos([...todos, { text: inputText, completed: false, id: Math.random() * 1000 }]);\r\n        setInputText(\"\");\r\n    };\r\n\r\n    return (\r\n        <form>\r\n            <input\r\n                value={inputText}\r\n                onChange={inputTextHandler}\r\n                type=\"text\"\r\n                className=\"todo-in\"\r\n                placeholder=\"Enter todo items:\"\r\n            />\r\n            <button onClick={clickHandler} className=\"todo-btn\" type=\"submit\">\r\n                <i className=\"fas fa-plus-square\"></i>\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Todo = ({ text, todo, todos, setTodos }) => {\r\n    const checkBtnHandler = (e) => {\r\n        setTodos(\r\n            todos.map((item) => {\r\n                if (item.id === todo.id) {\r\n                    return {\r\n                        ...item,\r\n                        completed: !item.completed,\r\n                    };\r\n                }\r\n                return item;\r\n            })\r\n        );\r\n    };\r\n\r\n    const delBtnHandler = (e) => {\r\n        setTodos(todos.filter((el) => el.id !== todo.id));\r\n    };\r\n\r\n    return (\r\n        <div className=\"todo\">\r\n            <li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>{text}</li>\r\n            <button onClick={checkBtnHandler} className=\"complete-btn\">\r\n                <i className=\"fas fa-check\"></i>\r\n            </button>\r\n            <button onClick={delBtnHandler} className=\"delete-btn\">\r\n                <i className=\"fas fa-trash\"></i>\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport \"../App.css\";\r\nimport Todo from \"./Todo\";\r\n\r\nconst TodoList = ({ setTodos, todos }) => {\r\n    return (\r\n        <div className=\"todo-container\">\r\n            <ul className=\"todo-list\">\r\n                {todos.map((todo) => (\r\n                    <Todo\r\n                        todos={todos}\r\n                        setTodos={setTodos}\r\n                        todo={todo}\r\n                        text={todo.text}\r\n                        key={todo.id}\r\n                    />\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n    return <h4>Made with React</h4>;\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useState } from \"react\";\nimport Header from \"./components/Header\";\nimport Form from \"./components/Form\";\nimport TodoList from \"./components/TodoList\";\nimport Footer from \"./components/Footer\";\nimport \"./App.css\";\n\nfunction App() {\n    const [inputText, setInputText] = useState(\"\");\n    const [todos, setTodos] = useState([]);\n\n    return (\n        <div className=\"App\">\n            <Header />\n            <Form\n                setInputText={setInputText}\n                inputText={inputText}\n                todos={todos}\n                setTodos={setTodos}\n            />\n            <TodoList todos={todos} setTodos={setTodos} />\n            <Footer />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}